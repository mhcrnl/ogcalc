#!/usr/bin/python3

from PyQt5.QtCore import QObject, Qt, QSize, pyqtSignal, pyqtSlot
from PyQt5.QtGui import QIcon, QFont
from PyQt5.QtWidgets import (QWidget, QApplication, QMainWindow, QHBoxLayout, QVBoxLayout, QDoubleSpinBox, QLabel, QPushButton, QSizePolicy, QFrame)

class SpinBoxEntry(QDoubleSpinBox):
    def __init__(self, parent):
        super(SpinBoxEntry, self).__init__(parent)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Enter or event.key() == Qt.Key_Return:
            self.enterPressed.emit()
        else:
            super(SpinBoxEntry, self).keyPressEvent(event)

    enterPressed = pyqtSignal()

class Ogcalc(QMainWindow):
    def __init__(self):
        super(Ogcalc, self).__init__()
        self.setupUi()
        self.reset()

    def setupUi(self):
        self.setObjectName("ogcalc")
        self.resize(407, 123)

        wsp = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
        wsp.setHorizontalStretch(0)
        wsp.setVerticalStretch(0)
        wsp.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(wsp)
        self.setMaximumSize(QSize(16777215, 16777215))

        icon = QIcon()
        icon.addFile("ogcalc.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.setWindowIcon(icon)

        toplevel_layout = QWidget(self)
        toplevel_layout.setObjectName("toplevel_layout")
        tsp = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Minimum)
        tsp.setHorizontalStretch(0)
        tsp.setVerticalStretch(0)
        tsp.setHeightForWidth(toplevel_layout.sizePolicy().hasHeightForWidth())
        toplevel_layout.setSizePolicy(tsp)

        vertical_layout = QVBoxLayout(toplevel_layout)
        vertical_layout.setSpacing(6)
        vertical_layout.setContentsMargins(11, 11, 11, 11)
        vertical_layout.setObjectName("vertical_layout")

        label_size_policy = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Preferred)
        label_size_policy.setHorizontalStretch(0)
        label_size_policy.setVerticalStretch(0)
        label_size_policy.setHeightForWidth(False)

        entry_size_policy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        entry_size_policy.setHorizontalStretch(0)
        entry_size_policy.setVerticalStretch(0)
        entry_size_policy.setHeightForWidth(False)

        result_size_policy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        result_size_policy.setHorizontalStretch(0)
        result_size_policy.setVerticalStretch(0)
        result_size_policy.setHeightForWidth(False)

        entry_layout = QHBoxLayout()
        entry_layout.setSpacing(6)
        entry_layout.setObjectName("entry_layout")

        pg_layout = QHBoxLayout()
        pg_layout.setSpacing(6)
        pg_layout.setObjectName("pg_layout")

        self.pg_label = QLabel(toplevel_layout)
        self.pg_label.setObjectName("pg_label")
        self.pg_label.setSizePolicy(label_size_policy)
        self.pg_label.setTextFormat(Qt.AutoText)
        pg_layout.addWidget(self.pg_label)

        self.pg_entry = SpinBoxEntry(toplevel_layout)
        self.pg_entry.setObjectName("pg_entry")
        self.pg_entry.setSizePolicy(entry_size_policy)

        pg_layout.addWidget(self.pg_entry)

        entry_layout.addLayout(pg_layout)

        ri_layout = QHBoxLayout()
        ri_layout.setSpacing(6)
        ri_layout.setObjectName("ri_layout")
        self.ri_label = QLabel(toplevel_layout)
        self.ri_label.setObjectName("ri_label")
        self.ri_label.setSizePolicy(label_size_policy)

        ri_layout.addWidget(self.ri_label)

        self.ri_entry = SpinBoxEntry(toplevel_layout)
        self.ri_entry.setObjectName("ri_entry")
        self.ri_entry.setSizePolicy(entry_size_policy)

        ri_layout.addWidget(self.ri_entry)

        entry_layout.addLayout(ri_layout)

        cf_layout = QHBoxLayout()
        cf_layout.setSpacing(6)
        cf_layout.setObjectName("cf_layout")
        self.cf_label = QLabel(toplevel_layout)
        self.cf_label.setObjectName("cf_label")
        self.cf_label.setSizePolicy(label_size_policy)

        cf_layout.addWidget(self.cf_label)

        self.cf_entry = SpinBoxEntry(toplevel_layout)
        self.cf_entry.setObjectName("cf_entry")
        self.cf_entry.setSizePolicy(entry_size_policy)

        cf_layout.addWidget(self.cf_entry)

        entry_layout.addLayout(cf_layout)

        vertical_layout.addLayout(entry_layout)

        result_layout = QHBoxLayout()
        result_layout.setSpacing(6)
        result_layout.setObjectName("result_layout")
        og_layout = QHBoxLayout()
        og_layout.setSpacing(6)
        og_layout.setObjectName("og_layout")
        self.og_label = QLabel(toplevel_layout)
        self.og_label.setObjectName("og_label")
        self.og_label.setSizePolicy(label_size_policy)

        og_layout.addWidget(self.og_label)

        bold_font = QFont()
        bold_font.setBold(True)
        bold_font.setWeight(75)

        self.og_result = QLabel(toplevel_layout)
        self.og_result.setObjectName("og_result")
        self.og_result.setSizePolicy(result_size_policy)
        self.og_result.setFont(bold_font)
        self.og_result.setAlignment(Qt.AlignCenter)
        self.og_result.setTextInteractionFlags(Qt.TextSelectableByKeyboard|Qt.TextSelectableByMouse)

        og_layout.addWidget(self.og_result)

        result_layout.addLayout(og_layout)

        abv_layout = QHBoxLayout()
        abv_layout.setSpacing(6)
        abv_layout.setObjectName("abv_layout")
        self.abv_label = QLabel(toplevel_layout)
        self.abv_label.setObjectName("abv_label")
        self.abv_label.setSizePolicy(label_size_policy)
        abv_layout.addWidget(self.abv_label)

        self.abv_result = QLabel(toplevel_layout)
        self.abv_result.setObjectName("abv_result")
        self.abv_result.setSizePolicy(result_size_policy)
        self.abv_result.setFont(bold_font)
        self.abv_result.setAlignment(Qt.AlignCenter)
        self.abv_result.setTextInteractionFlags(Qt.TextSelectableByKeyboard|Qt.TextSelectableByMouse)

        abv_layout.addWidget(self.abv_result)

        result_layout.addLayout(abv_layout)

        vertical_layout.addLayout(result_layout)

        line = QFrame(toplevel_layout)
        line.setObjectName("line")
        line.setFrameShadow(QFrame.Sunken)
        line.setLineWidth(1)
        line.setMidLineWidth(0)
        line.setFrameShape(QFrame.HLine)
        vertical_layout.addWidget(line)

        button_layout = QHBoxLayout()
        button_layout.setSpacing(6)
        button_layout.setObjectName("button_layout")

        self.quit_button = QPushButton(toplevel_layout)
        self.quit_button.setObjectName("quit")
        button_layout.addWidget(self.quit_button)

        self.reset_button = QPushButton(toplevel_layout)
        self.reset_button.setObjectName("reset")
        self.reset_button.setAutoDefault(True)
        button_layout.addWidget(self.reset_button)

        self.calculate_button = QPushButton(toplevel_layout)
        self.calculate_button.setObjectName("calculate")
        self.calculate_button.setAutoDefault(True)
        self.calculate_button.setDefault(True)
        button_layout.addWidget(self.calculate_button)


        vertical_layout.addLayout(button_layout)

        self.setCentralWidget(toplevel_layout)
        self.pg_label.setBuddy(self.pg_entry)
        self.ri_label.setBuddy(self.ri_entry)
        self.cf_label.setBuddy(self.cf_entry)

        self.retranslateUi()

        self.reset_button.clicked.connect(self.reset)
        self.quit_button.clicked.connect(self.close)
        self.calculate_button.clicked.connect(self.calculate)
        self.calculate_button.clicked.connect(self.reset_button.setFocus)

        self.pg_entry.enterPressed.connect(self.ri_entry.setFocus)
        self.pg_entry.enterPressed.connect(self.ri_entry.selectAll)
        self.ri_entry.enterPressed.connect(self.cf_entry.setFocus)
        self.ri_entry.enterPressed.connect(self.cf_entry.selectAll)
        self.cf_entry.enterPressed.connect(self.calculate_button.click)
        self.pg_entry.enterPressed.connect(self.ri_entry.setFocus)


    def retranslateUi(self):
        self.setWindowTitle(QApplication.translate("ogcalc", "OG & ABV calculator", None, 0))

        self.pg_label.setToolTip(QApplication.translate("ogcalc", "Present Gravity (density)", None, 0))
        self.ri_label.setToolTip(QApplication.translate("ogcalc", "Refractive Index", None, 0))
        self.cf_label.setToolTip(QApplication.translate("ogcalc", "Correction Factor", None, 0))
        self.og_label.setToolTip(QApplication.translate("ogcalc", "Original Gravity (density)", None, 0))
        self.abv_label.setToolTip(QApplication.translate("ogcalc", "Percent Alcohol By Volume", None, 0))

        self.pg_label.setText(QApplication.translate("ogcalc", "&PG:", None, 0))
        self.ri_label.setText(QApplication.translate("ogcalc", "R&I:", None, 0))
        self.cf_label.setText(QApplication.translate("ogcalc", "C&F:", None, 0))
        self.og_label.setText(QApplication.translate("ogcalc", "OG:", None, 0))
        self.abv_label.setText(QApplication.translate("ogcalc", "ABV %:", None, 0))

        self.quit_button.setText(QApplication.translate("ogcalc", "&Quit", None, 0))
        self.reset_button.setText(QApplication.translate("ogcalc", "&Reset", None, 0))
        self.calculate_button.setText(QApplication.translate("ogcalc", "&Calculate", None, 0))

    @pyqtSlot()
    def calculate(self):
        pg = self.pg_entry.value()
        ri = self.ri_entry.value()
        cf = self.cf_entry.value()

        #Calculate OG.
        og = (ri * 2.597) - (pg * 1.644) - 34.4165 + cf

        # Calculate ABV.
        abv = 0.0
        if og < 60:
            abv = (og - pg) * 0.130
        else:
            abv = (og - pg) * 0.134

        self.og_result.setText("%(result)0.2f" %{'result': og})
        self.abv_result.setText("%(result)0.2f" %{'result': abv})

        self.reset_button.setDefault(True)
        self.calculate_button.setDefault(False)

    @pyqtSlot()
    def reset(self):
        self.pg_entry.setValue(0.0)
        self.ri_entry.setValue(0.0)
        self.cf_entry.setValue(0.0)
        self.og_result.setText("")
        self.abv_result.setText("")

        self.pg_entry.setFocus()
        self.pg_entry.selectAll()
        self.reset_button.setDefault(False)
        self.calculate_button.setDefault(True)


if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    ogcalc = Ogcalc()
    ogcalc.show()
    sys.exit(app.exec())


# Local Variables:
# mode:Python
# fill-column:60
# End:
