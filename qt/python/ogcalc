#!/usr/bin/python3
#
# ogcalc - calculate %ABV and OG from PG, RI and CF.
#
# Copyright Â© 2003-2013  Roger Leigh <rleigh@debian.org>
#
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General
# Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
# MA 02139, USA.
#
#############################################################

from PyQt5.QtCore import (QObject, QSize, Qt, pyqtSignal, pyqtSlot)
from PyQt5.QtGui import (QFont, QIcon)
from PyQt5.QtWidgets import (QApplication, QDoubleSpinBox, QFrame,
                             QHBoxLayout, QLabel, QMainWindow,
                             QPushButton, QSizePolicy, QVBoxLayout,
                             QWidget)

class SpinBoxEntry(QDoubleSpinBox):
    def __init__(self, parent = None):
        super(SpinBoxEntry, self).__init__(parent)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Enter or event.key() == Qt.Key_Return:
            self.enterPressed.emit()
        else:
            super(SpinBoxEntry, self).keyPressEvent(event)

    enterPressed = pyqtSignal()

class OgcalcSpinEntry(QHBoxLayout):
    label_size_policy = QSizePolicy(QSizePolicy.Minimum,
                                    QSizePolicy.Preferred)
    label_size_policy.setHorizontalStretch(0)
    label_size_policy.setVerticalStretch(0)
    label_size_policy.setHeightForWidth(False)

    entry_size_policy = QSizePolicy(QSizePolicy.Expanding,
                                    QSizePolicy.Fixed)
    entry_size_policy.setHorizontalStretch(0)
    entry_size_policy.setVerticalStretch(0)
    entry_size_policy.setHeightForWidth(False)

    def __init__(self, parent = None):
        super(OgcalcSpinEntry, self).__init__(None)

        self.setSpacing(6)

        self.label = QLabel()
        self.label.setSizePolicy(OgcalcSpinEntry.label_size_policy)
        self.label.setTextFormat(Qt.AutoText)
        self.addWidget(self.label)

        self.entry = SpinBoxEntry()
        self.entry.setSizePolicy(OgcalcSpinEntry.entry_size_policy)
        self.addWidget(self.entry)

        self.label.setBuddy(self.entry)

        self.entry.enterPressed.connect(self.__enterPressed)

    def setToolTip(self, tip):
        self.label.setToolTip(tip)

    def setText(self, text):
        self.label.setText(text)

    def value(self):
        return self.entry.value()

    def setValue(self, value):
        self.entry.setValue(value)

    def setStartEdit(self):
        self.entry.setFocus()
        self.entry.selectAll()

    def __enterPressed(self):
            self.enterPressed.emit()

    enterPressed = pyqtSignal()

class OgcalcResult(QHBoxLayout):
    label_size_policy = QSizePolicy(QSizePolicy.Minimum,
                                    QSizePolicy.Preferred)
    label_size_policy.setHorizontalStretch(0)
    label_size_policy.setVerticalStretch(0)
    label_size_policy.setHeightForWidth(False)

    result_size_policy = QSizePolicy(QSizePolicy.Expanding,
                                     QSizePolicy.Preferred)
    result_size_policy.setHorizontalStretch(0)
    result_size_policy.setVerticalStretch(0)
    result_size_policy.setHeightForWidth(False)

    bold_font = QFont()
    bold_font.setBold(True)
    bold_font.setWeight(75)

    def __init__(self, parent = None):
        super(OgcalcResult, self).__init__(None)

        self.setSpacing(6)

        self.label = QLabel()
        self.label.setSizePolicy(OgcalcResult.label_size_policy)
        self.addWidget(self.label)

        self.result = QLabel()
        self.result.setSizePolicy(OgcalcResult.result_size_policy)
        self.result.setFont(OgcalcResult.bold_font)
        self.result.setAlignment(Qt.AlignCenter)
        self.result.setTextInteractionFlags(Qt.TextSelectableByKeyboard|Qt.TextSelectableByMouse)
        self.addWidget(self.result)

    def setToolTip(self, tip):
        self.label.setToolTip(tip)

    def setText(self, text):
        self.label.setText(text)

    def setResult(self, text):
        self.result.setText(text)

class Ogcalc(QMainWindow):
    def __init__(self):
        super(Ogcalc, self).__init__()

        self.resize(407, 123)

        window_size_policy = QSizePolicy(QSizePolicy.Preferred,
                                         QSizePolicy.Preferred)
        window_size_policy.setHorizontalStretch(0)
        window_size_policy.setVerticalStretch(0)
        window_size_policy.setHeightForWidth(self.sizePolicy().
                                             hasHeightForWidth())
        self.setSizePolicy(window_size_policy)
        self.setMaximumSize(QSize(16777215, 16777215))

        icon = QIcon()
        icon.addFile("ogcalc.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.setWindowIcon(icon)

        toplevel_layout = QWidget(self)
        toplevel_size_policy = QSizePolicy(QSizePolicy.Minimum,
                                           QSizePolicy.Minimum)
        toplevel_size_policy.setHorizontalStretch(0)
        toplevel_size_policy.setVerticalStretch(0)
        toplevel_size_policy.setHeightForWidth(toplevel_layout.sizePolicy().
                                               hasHeightForWidth())
        toplevel_layout.setSizePolicy(toplevel_size_policy)

        vertical_layout = QVBoxLayout(toplevel_layout)
        vertical_layout.setSpacing(6)
        vertical_layout.setContentsMargins(11, 11, 11, 11)

        entry_layout = QHBoxLayout()
        entry_layout.setSpacing(6)
        self.pg_entry = OgcalcSpinEntry(toplevel_layout)
        entry_layout.addLayout(self.pg_entry)
        self.ri_entry = OgcalcSpinEntry(toplevel_layout)
        entry_layout.addLayout(self.ri_entry)
        self.cf_entry = OgcalcSpinEntry(toplevel_layout)
        entry_layout.addLayout(self.cf_entry)
        vertical_layout.addLayout(entry_layout)

        result_layout = QHBoxLayout()
        result_layout.setSpacing(6)
        self.og_result = OgcalcResult(toplevel_layout)
        result_layout.addLayout(self.og_result)
        self.abv_result = OgcalcResult(toplevel_layout)
        result_layout.addLayout(self.abv_result)
        vertical_layout.addLayout(result_layout)

        line = QFrame(toplevel_layout)
        line.setFrameShadow(QFrame.Sunken)
        line.setLineWidth(1)
        line.setMidLineWidth(0)
        line.setFrameShape(QFrame.HLine)
        vertical_layout.addWidget(line)

        button_layout = QHBoxLayout()
        button_layout.setSpacing(6)
        self.quit_button = QPushButton(toplevel_layout)
        button_layout.addWidget(self.quit_button)
        self.reset_button = QPushButton(toplevel_layout)
        self.reset_button.setAutoDefault(True)
        button_layout.addWidget(self.reset_button)
        self.calculate_button = QPushButton(toplevel_layout)
        self.calculate_button.setAutoDefault(True)
        self.calculate_button.setDefault(True)
        button_layout.addWidget(self.calculate_button)
        vertical_layout.addLayout(button_layout)

        self.setCentralWidget(toplevel_layout)

        self.retranslateUi()

        self.reset_button.clicked.connect(self.reset)
        self.quit_button.clicked.connect(self.close)
        self.calculate_button.clicked.connect(self.calculate)
        self.calculate_button.clicked.connect(self.reset_button.setFocus)

        self.pg_entry.enterPressed.connect(self.ri_entry.setStartEdit)
        self.ri_entry.enterPressed.connect(self.cf_entry.setStartEdit)
        self.cf_entry.enterPressed.connect(self.calculate_button.click)

        self.reset()

    def retranslateUi(self):
        self.setWindowTitle(QApplication.translate("ogcalc", "OG & ABV calculator", None, 0))
        self.pg_entry.setToolTip(QApplication.translate("ogcalc", "Present Gravity (density)", None, 0))

        self.ri_entry.setToolTip(QApplication.translate("ogcalc", "Refractive Index", None, 0))
        self.cf_entry.setToolTip(QApplication.translate("ogcalc", "Correction Factor", None, 0))
        self.og_result.setToolTip(QApplication.translate("ogcalc", "Original Gravity (density)", None, 0))
        self.abv_result.setToolTip(QApplication.translate("ogcalc", "Percent Alcohol By Volume", None, 0))
        self.pg_entry.setText(QApplication.translate("ogcalc", "&PG:", None, 0))
        self.ri_entry.setText(QApplication.translate("ogcalc", "R&I:", None, 0))
        self.cf_entry.setText(QApplication.translate("ogcalc", "C&F:", None, 0))
        self.og_result.setText(QApplication.translate("ogcalc", "OG:", None, 0))
        self.abv_result.setText(QApplication.translate("ogcalc", "ABV %:", None, 0))

        self.quit_button.setText(QApplication.translate("ogcalc", "&Quit", None, 0))
        self.reset_button.setText(QApplication.translate("ogcalc", "&Reset", None, 0))
        self.calculate_button.setText(QApplication.translate("ogcalc", "&Calculate", None, 0))

    @pyqtSlot()
    def calculate(self):
        pg = self.pg_entry.value()
        ri = self.ri_entry.value()
        cf = self.cf_entry.value()

        #Calculate OG.
        og = (ri * 2.597) - (pg * 1.644) - 34.4165 + cf

        # Calculate ABV.
        abv = 0.0
        if og < 60:
            abv = (og - pg) * 0.130
        else:
            abv = (og - pg) * 0.134

        self.og_result.setResult("%(result)0.2f" %{'result': og})
        self.abv_result.setResult("%(result)0.2f" %{'result': abv})

        self.reset_button.setDefault(True)
        self.calculate_button.setDefault(False)

    @pyqtSlot()
    def reset(self):
        self.pg_entry.setValue(0.0)
        self.ri_entry.setValue(0.0)
        self.cf_entry.setValue(0.0)
        self.og_result.setResult("")
        self.abv_result.setResult("")

        self.reset_button.setDefault(False)
        self.calculate_button.setDefault(True)
        self.pg_entry.setStartEdit()


if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    ogcalc = Ogcalc()
    ogcalc.show()
    sys.exit(app.exec())


# Local Variables:
# mode:Python
# fill-column:60
# End:
