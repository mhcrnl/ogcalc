#!/usr/bin/python3
#
# ogcalc - calculate %ABV and OG from PG, RI and CF.
#
# Copyright Â© 2003-2013  Roger Leigh <rleigh@codelibre.net>
#
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General
# Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
# MA 02139, USA.
#
#############################################################

from PyQt5 import uic
from PyQt5.QtCore import (QObject, QSize, Qt, pyqtSignal, pyqtSlot)
from PyQt5.QtGui import (QFont, QIcon)
from PyQt5.QtWidgets import (QApplication, QDoubleSpinBox, QFrame,
                             QHBoxLayout, QLabel, QMainWindow,
                             QPushButton, QSizePolicy, QVBoxLayout,
                             QWidget)
import SpinBoxEntry

class Ogcalc(QMainWindow):
    def __init__(self):
        super(Ogcalc, self).__init__()

        import __main__
        self.ui = uic.loadUi("ogcalc.ui", self)

        self.quit_button.clicked.connect(self.close)
        self.reset_button.clicked.connect(self.reset)
        self.calculate_button.clicked.connect(self.calculate)
        self.calculate_button.clicked.connect(self.reset_button.setFocus)

    @pyqtSlot()
    def calculate(self):
        pg = self.pg_entry.value()
        ri = self.ri_entry.value()
        cf = self.cf_entry.value()

        #Calculate OG.
        og = (ri * 2.597) - (pg * 1.644) - 34.4165 + cf

        # Calculate ABV.
        abv = 0.0
        if og < 60:
            abv = (og - pg) * 0.130
        else:
            abv = (og - pg) * 0.134

        self.og_result.setText("%(result)0.2f" %{'result': og})
        self.abv_result.setText("%(result)0.2f" %{'result': abv})

        self.reset_button.setDefault(True)
        self.calculate_button.setDefault(False)

    @pyqtSlot()
    def reset(self):
        self.pg_entry.setValue(0.0)
        self.ri_entry.setValue(0.0)
        self.cf_entry.setValue(0.0)
        self.og_result.setText("")
        self.abv_result.setText("")

        self.reset_button.setDefault(False)
        self.calculate_button.setDefault(True)
        self.pg_entry.setFocus()
        self.pg_entry.selectAll()


if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    ogcalc = Ogcalc()
    ogcalc.show()
#    w = uic.loadUi("ogcalc.ui")
#   w.show()
    sys.exit(app.exec())


# Local Variables:
# mode:Python
# fill-column:60
# End:
